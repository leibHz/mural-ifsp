preciso de ajuda pra desenvolver um site, ele é um mural sobre a violencia escolar, uma espécie de twiter só que do IFSP, nele vai poder

enviar um video, foto gif pdf audio texto e etc.. com uma descrição obrigatoria abaixo de cada um

no caso de audio, o audio pode ser transcrito pra pessoas com problemas auditivos

eles são mostrados no mural como miniatura e são expandidos pra um modal ao clicar, no caso de pdf e videos e gifs, els são mostrados como uma miniatura estatica (no caso do pdf só mostra a primeira pagina) , mas são mostrados completamente ao clicar, no caso dos videos e audio, o som obiviamente é reproduzido

o formato de audio compativel é .mp3, .wav e .ogg

o site usará python pro backend e sera feito com html, css, js e claro, python com flask
o banco de dados será da supabase, ja tenho um schema pronto, no qual te enviei o arquivo .sql, ele ta sem o rls, adicone ele pois é importante para segurança

use variaveis globais para melhhor segurança

o site deve ser de cor predominante verde com um minimo de vermelho num tema escuro, com a logo do ifsp de bragança paulista no site, eu enviei a imagem da logo pra vc anaçlisar tambem


ter um painel adiminstrativo pra gerenciar os projetos e apagar aqueles que forem inapropriados, banir usuarios, etc...

so podera publicar quem for do ifsp, pra isso, sera nessesario uma conta que use o BP (prontuario), e uma senha, apartir disso ser a pedido pra criar um nome de usuario, dai tera o perfil com o nome real e o nome de usuario e o BP, ele tambem pedirá pra adicionar uma foto de perfil

pessoas que não são do if podem ter uma conta difernete de quem é do if, ao inves do bp ele pede apenas a senha, nome de usuario e email, será enviado então um codigo de confirmação de 4 digitos e a conta so sera criada apos digitar esse codigo e se ele estiver correto

pessoas com essa "conta diferente" podem apenas comentar nos projetos, essa conta diferente é chamada de visitante

pessoas sem conta podem apenas visualizar os projetos
 
colocar bastnate efeitos e animaçoes pra melhor fluidez do site, como efeito de pagina unica, hover, overlay, glassmorphism, botões animados, flutuante, etc...

sei que é bastnate coisa, mais pode fazer isso pra mim por favor gemini?
no caso do banco de dados, faça um script pra gerar ele
sei que é muita coisa pra vc fazer tudo de uma vez, então faça um plano de implementação separados em módulos, isso vai facilitar as coisas

lembre de separar cada coisa em VARIOS ARQUIVOS pra ficar mais ORGANIZADO e me fala o caminho de cada arquivo

o schema do banco de dados caso precise

-- ============================================
-- SCRIPT DE CRIAÇÃO DO BANCO DE DADOS
-- Mural IFSP - Sistema de Denúncia Escolar
-- COM ROW LEVEL SECURITY (RLS)
-- ============================================

-- Extensões necessárias
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- ============================================
-- TABELA: usuarios
-- ============================================
CREATE TABLE usuarios (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    tipo_usuario VARCHAR(20) NOT NULL CHECK (tipo_usuario IN ('estudante', 'visitante')),
    
    -- Dados comuns
    nome_usuario VARCHAR(50) UNIQUE NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    senha_hash VARCHAR(255) NOT NULL,
    foto_perfil_url TEXT,
    
    -- Dados específicos de estudantes
    nome_real VARCHAR(255),
    bp VARCHAR(20) UNIQUE,
    
    -- Controle
    email_verificado BOOLEAN DEFAULT FALSE,
    codigo_verificacao VARCHAR(4),
    codigo_expiracao TIMESTAMP,
    banido BOOLEAN DEFAULT FALSE,
    motivo_ban TEXT,
    data_ban TIMESTAMP,
    
    -- Metadados
    criado_em TIMESTAMP DEFAULT NOW(),
    atualizado_em TIMESTAMP DEFAULT NOW(),
    ultimo_acesso TIMESTAMP,
    
    -- Constraints
    CONSTRAINT check_estudante_bp CHECK (
        (tipo_usuario = 'estudante' AND bp IS NOT NULL AND nome_real IS NOT NULL) OR
        (tipo_usuario = 'visitante' AND bp IS NULL)
    )
);

-- ============================================
-- TABELA: postagens
-- ============================================
CREATE TABLE postagens (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    usuario_id UUID NOT NULL REFERENCES usuarios(id) ON DELETE CASCADE,
    
    -- Conteúdo
    descricao TEXT NOT NULL,
    tipo_midia VARCHAR(20) NOT NULL CHECK (tipo_midia IN ('imagem', 'video', 'gif', 'pdf', 'audio', 'texto')),
    url_midia TEXT,
    url_miniatura TEXT,
    transcricao_audio TEXT,
    
    -- Metadados da mídia
    tamanho_arquivo BIGINT,
    duracao_midia INTEGER,
    formato_arquivo VARCHAR(10),
    
    -- Moderação
    aprovado BOOLEAN DEFAULT TRUE,
    denunciado BOOLEAN DEFAULT FALSE,
    numero_denuncias INTEGER DEFAULT 0,
    
    -- Estatísticas
    visualizacoes INTEGER DEFAULT 0,
    
    -- Timestamps
    criado_em TIMESTAMP DEFAULT NOW(),
    atualizado_em TIMESTAMP DEFAULT NOW(),
    deletado_em TIMESTAMP
);

-- ============================================
-- TABELA: comentarios
-- ============================================
CREATE TABLE comentarios (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    postagem_id UUID NOT NULL REFERENCES postagens(id) ON DELETE CASCADE,
    usuario_id UUID NOT NULL REFERENCES usuarios(id) ON DELETE CASCADE,
    
    -- Conteúdo
    texto TEXT NOT NULL,
    
    -- Moderação
    aprovado BOOLEAN DEFAULT TRUE,
    denunciado BOOLEAN DEFAULT FALSE,
    
    -- Timestamps
    criado_em TIMESTAMP DEFAULT NOW(),
    atualizado_em TIMESTAMP DEFAULT NOW(),
    deletado_em TIMESTAMP
);

-- ============================================
-- TABELA: denuncias
-- ============================================
CREATE TABLE denuncias (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    denunciante_id UUID REFERENCES usuarios(id) ON DELETE SET NULL,
    
    -- Tipo de denúncia
    tipo_conteudo VARCHAR(20) NOT NULL CHECK (tipo_conteudo IN ('postagem', 'comentario', 'usuario')),
    conteudo_id UUID NOT NULL,
    
    -- Detalhes
    motivo VARCHAR(100) NOT NULL,
    descricao TEXT,
    
    -- Status
    resolvido BOOLEAN DEFAULT FALSE,
    admin_responsavel_id UUID REFERENCES usuarios(id) ON DELETE SET NULL,
    acao_tomada TEXT,
    
    -- Timestamps
    criado_em TIMESTAMP DEFAULT NOW(),
    resolvido_em TIMESTAMP
);

-- ============================================
-- TABELA: administradores
-- ============================================
CREATE TABLE administradores (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    usuario_id UUID UNIQUE NOT NULL REFERENCES usuarios(id) ON DELETE CASCADE,
    nivel_permissao VARCHAR(20) NOT NULL CHECK (nivel_permissao IN ('super_admin', 'moderador')),
    
    -- Timestamps
    criado_em TIMESTAMP DEFAULT NOW()
);

-- ============================================
-- TABELA: logs_admin
-- ============================================
CREATE TABLE logs_admin (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    admin_id UUID NOT NULL REFERENCES usuarios(id) ON DELETE CASCADE,
    
    -- Ação
    tipo_acao VARCHAR(50) NOT NULL,
    descricao TEXT NOT NULL,
    alvo_id UUID,
    dados_anteriores JSONB,
    
    -- Timestamp
    criado_em TIMESTAMP DEFAULT NOW()
);

-- ============================================
-- TABELA: sessoes
-- ============================================
CREATE TABLE sessoes (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    usuario_id UUID NOT NULL REFERENCES usuarios(id) ON DELETE CASCADE,
    token VARCHAR(255) UNIQUE NOT NULL,
    ip_address VARCHAR(45),
    user_agent TEXT,
    expira_em TIMESTAMP NOT NULL,
    criado_em TIMESTAMP DEFAULT NOW()
);

-- ============================================
-- ÍNDICES
-- ============================================

CREATE INDEX idx_usuarios_tipo ON usuarios(tipo_usuario);
CREATE INDEX idx_usuarios_email ON usuarios(email);
CREATE INDEX idx_usuarios_bp ON usuarios(bp);
CREATE INDEX idx_usuarios_banido ON usuarios(banido);

CREATE INDEX idx_postagens_usuario ON postagens(usuario_id);
CREATE INDEX idx_postagens_tipo ON postagens(tipo_midia);
CREATE INDEX idx_postagens_data ON postagens(criado_em DESC);
CREATE INDEX idx_postagens_aprovado ON postagens(aprovado);
CREATE INDEX idx_postagens_denunciado ON postagens(denunciado);

CREATE INDEX idx_comentarios_postagem ON comentarios(postagem_id);
CREATE INDEX idx_comentarios_usuario ON comentarios(usuario_id);
CREATE INDEX idx_comentarios_data ON comentarios(criado_em DESC);

CREATE INDEX idx_denuncias_tipo ON denuncias(tipo_conteudo, conteudo_id);
CREATE INDEX idx_denuncias_resolvido ON denuncias(resolvido);

CREATE INDEX idx_sessoes_usuario ON sessoes(usuario_id);
CREATE INDEX idx_sessoes_token ON sessoes(token);
CREATE INDEX idx_sessoes_expira ON sessoes(expira_em);

-- ============================================
-- TRIGGERS
-- ============================================

CREATE OR REPLACE FUNCTION atualizar_timestamp()
RETURNS TRIGGER AS $$
BEGIN
    NEW.atualizado_em = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_usuarios_timestamp
    BEFORE UPDATE ON usuarios
    FOR EACH ROW
    EXECUTE FUNCTION atualizar_timestamp();

CREATE TRIGGER trigger_postagens_timestamp
    BEFORE UPDATE ON postagens
    FOR EACH ROW
    EXECUTE FUNCTION atualizar_timestamp();

CREATE TRIGGER trigger_comentarios_timestamp
    BEFORE UPDATE ON comentarios
    FOR EACH ROW
    EXECUTE FUNCTION atualizar_timestamp();

-- ============================================
-- FUNÇÕES UTILITÁRIAS
-- ============================================

CREATE OR REPLACE FUNCTION limpar_sessoes_expiradas()
RETURNS void AS $$
BEGIN
    DELETE FROM sessoes WHERE expira_em < NOW();
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION incrementar_visualizacao(postagem_uuid UUID)
RETURNS void AS $$
BEGIN
    UPDATE postagens 
    SET visualizacoes = visualizacoes + 1 
    WHERE id = postagem_uuid;
END;
$$ LANGUAGE plpgsql;

-- Função para verificar se usuário é admin
CREATE OR REPLACE FUNCTION eh_admin(usuario_uuid UUID)
RETURNS BOOLEAN AS $$
BEGIN
    RETURN EXISTS (
        SELECT 1 FROM administradores WHERE usuario_id = usuario_uuid
    );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Função para obter ID do usuário autenticado
CREATE OR REPLACE FUNCTION auth_user_id()
RETURNS UUID AS $$
BEGIN
    RETURN NULLIF(current_setting('request.jwt.claims', true)::json->>'user_id', '')::UUID;
END;
$$ LANGUAGE plpgsql STABLE;

-- ============================================
-- ROW LEVEL SECURITY (RLS)
-- ============================================

-- Habilitar RLS em todas as tabelas
ALTER TABLE usuarios ENABLE ROW LEVEL SECURITY;
ALTER TABLE postagens ENABLE ROW LEVEL SECURITY;
ALTER TABLE comentarios ENABLE ROW LEVEL SECURITY;
ALTER TABLE denuncias ENABLE ROW LEVEL SECURITY;
ALTER TABLE administradores ENABLE ROW LEVEL SECURITY;
ALTER TABLE logs_admin ENABLE ROW LEVEL SECURITY;
ALTER TABLE sessoes ENABLE ROW LEVEL SECURITY;

-- ============================================
-- POLÍTICAS RLS: USUARIOS
-- ============================================

-- Todos podem ver perfis públicos (exceto banidos)
CREATE POLICY "Perfis públicos visíveis"
ON usuarios FOR SELECT
USING (banido = FALSE);

-- Usuários podem atualizar seus próprios dados
CREATE POLICY "Usuários editam próprio perfil"
ON usuarios FOR UPDATE
USING (id = auth_user_id())
WITH CHECK (id = auth_user_id());

-- Apenas admins podem banir usuários
CREATE POLICY "Admins gerenciam usuários"
ON usuarios FOR ALL
USING (eh_admin(auth_user_id()));

-- Registro de novos usuários (público)
CREATE POLICY "Registro público"
ON usuarios FOR INSERT
WITH CHECK (true);

-- ============================================
-- POLÍTICAS RLS: POSTAGENS
-- ============================================

-- Todos podem ver postagens aprovadas e não deletadas
CREATE POLICY "Postagens públicas visíveis"
ON postagens FOR SELECT
USING (
    aprovado = TRUE 
    AND deletado_em IS NULL
);

-- Apenas estudantes podem criar postagens
CREATE POLICY "Estudantes criam postagens"
ON postagens FOR INSERT
WITH CHECK (
    usuario_id = auth_user_id() 
    AND EXISTS (
        SELECT 1 FROM usuarios 
        WHERE id = auth_user_id() 
        AND tipo_usuario = 'estudante'
        AND banido = FALSE
    )
);

-- Usuários podem editar/deletar suas próprias postagens
CREATE POLICY "Usuários editam próprias postagens"
ON postagens FOR UPDATE
USING (usuario_id = auth_user_id())
WITH CHECK (usuario_id = auth_user_id());

CREATE POLICY "Usuários deletam próprias postagens"
ON postagens FOR DELETE
USING (usuario_id = auth_user_id());

-- Admins podem moderar todas as postagens
CREATE POLICY "Admins moderam postagens"
ON postagens FOR ALL
USING (eh_admin(auth_user_id()));

-- ============================================
-- POLÍTICAS RLS: COMENTARIOS
-- ============================================

-- Todos podem ver comentários aprovados
CREATE POLICY "Comentários públicos visíveis"
ON comentarios FOR SELECT
USING (
    aprovado = TRUE 
    AND deletado_em IS NULL
);

-- Usuários autenticados (estudantes e visitantes) podem comentar
CREATE POLICY "Usuários comentam"
ON comentarios FOR INSERT
WITH CHECK (
    usuario_id = auth_user_id()
    AND EXISTS (
        SELECT 1 FROM usuarios 
        WHERE id = auth_user_id() 
        AND banido = FALSE
    )
);

-- Usuários editam/deletam próprios comentários
CREATE POLICY "Usuários editam próprios comentários"
ON comentarios FOR UPDATE
USING (usuario_id = auth_user_id())
WITH CHECK (usuario_id = auth_user_id());

CREATE POLICY "Usuários deletam próprios comentários"
ON comentarios FOR DELETE
USING (usuario_id = auth_user_id());

-- Admins moderam comentários
CREATE POLICY "Admins moderam comentários"
ON comentarios FOR ALL
USING (eh_admin(auth_user_id()));

-- ============================================
-- POLÍTICAS RLS: DENUNCIAS
-- ============================================

-- Usuários podem criar denúncias
CREATE POLICY "Usuários criam denúncias"
ON denuncias FOR INSERT
WITH CHECK (
    denunciante_id = auth_user_id()
    AND EXISTS (
        SELECT 1 FROM usuarios 
        WHERE id = auth_user_id() 
        AND banido = FALSE
    )
);

-- Usuários veem suas próprias denúncias
CREATE POLICY "Usuários veem próprias denúncias"
ON denuncias FOR SELECT
USING (denunciante_id = auth_user_id());

-- Admins veem e gerenciam todas as denúncias
CREATE POLICY "Admins gerenciam denúncias"
ON denuncias FOR ALL
USING (eh_admin(auth_user_id()));

-- ============================================
-- POLÍTICAS RLS: ADMINISTRADORES
-- ============================================

-- Apenas admins podem ver lista de administradores
CREATE POLICY "Admins veem administradores"
ON administradores FOR SELECT
USING (eh_admin(auth_user_id()));

-- Apenas super_admins podem criar/remover admins
CREATE POLICY "Super admins gerenciam admins"
ON administradores FOR ALL
USING (
    EXISTS (
        SELECT 1 FROM administradores 
        WHERE usuario_id = auth_user_id() 
        AND nivel_permissao = 'super_admin'
    )
);

-- ============================================
-- POLÍTICAS RLS: LOGS_ADMIN
-- ============================================

-- Apenas admins podem ver logs
CREATE POLICY "Admins veem logs"
ON logs_admin FOR SELECT
USING (eh_admin(auth_user_id()));

-- Logs são criados automaticamente (sem INSERT direto)
CREATE POLICY "Sistema cria logs"
ON logs_admin FOR INSERT
WITH CHECK (eh_admin(auth_user_id()));

-- ============================================
-- POLÍTICAS RLS: SESSOES
-- ============================================

-- Usuários veem apenas suas próprias sessões
CREATE POLICY "Usuários veem próprias sessões"
ON sessoes FOR SELECT
USING (usuario_id = auth_user_id());

-- Usuários gerenciam apenas suas próprias sessões
CREATE POLICY "Usuários gerenciam próprias sessões"
ON sessoes FOR ALL
USING (usuario_id = auth_user_id())
WITH CHECK (usuario_id = auth_user_id());

-- Admins podem ver todas as sessões (para segurança)
CREATE POLICY "Admins veem todas sessões"
ON sessoes FOR SELECT
USING (eh_admin(auth_user_id()));

-- ============================================
-- GRANTS (Permissões)
-- ============================================

-- Garantir que usuários autenticados possam acessar as tabelas
GRANT USAGE ON SCHEMA public TO authenticated;
GRANT ALL ON ALL TABLES IN SCHEMA public TO authenticated;
GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO authenticated;
GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA public TO authenticated;

-- Usuários anônimos (não logados) podem apenas ler postagens e comentários
GRANT SELECT ON postagens TO anon;
GRANT SELECT ON comentarios TO anon;
GRANT SELECT ON usuarios TO anon;

-- ============================================
-- FIM DO SCRIPT
-- ============================================

parte do codigo ja esta feito, cvomo pode ver, faça uma revisão buscando por bugs e dps vamos implementar oq falta
pode fazer isso por favor claude?